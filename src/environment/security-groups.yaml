Description: >
  This template contains the security groups required by our entire stack.
  We create them in a seperate nested template, so they can be referenced
  by all of the other nested templates.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the security groups should be deployed to

  BastionGroup:
    Description: The Security Group to allow SSH access to privae gorups
    Type: AWS::EC2::SecurityGroup::Id

Resources:
  # This security group defines who/where is allowed to access the Public Application Load Balancer.
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the public load balancer that sits in front of ECS
      SecurityGroupIngress:
        # Allow access from anywhere to our ECS services
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicLoadBalancer-SG

  # This security group defines who/where is allowed to access the Private Application Load Balancer.
  PrivateLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the private load balancer that sits in front of ECS
      SecurityGroupIngress:
        # Allow inbound access from API hosts
        - SourceSecurityGroupId: !Ref APIHostSecurityGroup
          IpProtocol: -1
        # Allow inbound access from UI hosts
        - SourceSecurityGroupId: !Ref UIHostSecurityGroup
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateLoadBalancer-SG

  # This security group defines who/where is allowed to access the API hosts
  UIHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        # Only allow inbound access to UI instances from the public ALB
        - SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
          IpProtocol: -1
        # allow inbound SSH access to ECS instances only from the bastion host
        - SourceSecurityGroupId: !Ref BastionGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-UIHosts-SG

  # This security group defines who/where is allowed to access the API hosts
  APIHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        # Allow inbound access to API instances from the public ALB
        - SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
          IpProtocol: -1
        # Allow inbound access to API instances from the UI instances
        - SourceSecurityGroupId: !Ref UIHostSecurityGroup
          IpProtocol: -1
        # allow inbound SSH access to ECS instances only from the bastion host
        - SourceSecurityGroupId: !Ref BastionGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-APIHosts-SG

  # This security group defines who/where is allowed to access the FaceTec hosts
  FaceTecHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the FaceTec Cluster
      SecurityGroupIngress:
        # TODO: Remove this after testing
        - SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
          IpProtocol: -1
        # # Only allow inbound access to FaceTec instances from the private ALB
        # - SourceSecurityGroupId: !Ref PrivateLoadBalancerSecurityGroup
        #   IpProtocol: -1
        # allow inbound SSH access to FaceTec instances only from the bastion host
        - SourceSecurityGroupId: !Ref BastionGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-FaceTecHosts-SG

  # This security group defines who/where is allowed to access the Mongo VPCE
  MongoVPCESecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the Mongo VPCE for the tasks/containers that run on the cluster
      SecurityGroupIngress:
        # Allow access from ECS hosts, and facetec
        - SourceSecurityGroupId: !Ref APIHostSecurityGroup
          IpProtocol: -1
        - SourceSecurityGroupId: !Ref FaceTecHostSecurityGroup
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-MongoVPCE-SG

Outputs:
  PublicLoadBalancerSecurityGroup:
    Description: A reference to the security group for the public load balancer
    Value: !Ref PublicLoadBalancerSecurityGroup

  PrivateLoadBalancerSecurityGroup:
    Description: A reference to the security group for the private load balancer
    Value: !Ref PrivateLoadBalancerSecurityGroup

  APIHostSecurityGroup:
    Description: A reference to the security group for API hosts
    Value: !Ref APIHostSecurityGroup

  FaceTecHostSecurityGroup:
    Description: A reference to the security group for FaceTec hosts
    Value: !Ref FaceTecHostSecurityGroup

  UIHostSecurityGroup:
    Description: A reference to the security group for UI hosts
    Value: !Ref UIHostSecurityGroup

  MongoVPCESecurityGroup:
    Description: A reference to the security group for Mongo VPCE
    Value: !Ref MongoVPCESecurityGroup
