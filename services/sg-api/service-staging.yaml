Description: >
  This is the ECS service that serves the core SuperGuard API

Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: The name of the environment to add this service to

  EnvPort:
    Type: String
    Default: 8001
    Description: The port to expose the service on

  EnvApiBaseUrl:
    Type: String
    Default: https://api-dev.superguard.com.au
    Description: The base url this service is hosted on

  EnvAppBaseUrl:
    Type: String
    Default: https://app-dev.superguard.com.au
    Description: The base url the user facing app is hosted on

  EnvAdminBaseUrl:
    Type: String
    Default: https://portal-dev.superguard.com.au
    Description: The base url the admin portal is hosted on

  EnvRedisHost:
    Type: String
    Default: localhost
    Description: The host for the Redis service

  EnvRedisPort:
    Type: String
    Default: 6379
    Description: The port to access the Redis service

  EnvFaceTecApiBaseUrl:
    Type: String
    Description: The base url to access the FaceTec Standard Server API

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2

  Hosts:
    Description: The host to register with the Application Load Balancer
    Type: String

  ImageUrl:
    Description: The Docker image url to deploy for this service
    Type: String
  
  MongoVPCEServiceName:
    Description: The service name to use for the MongoDB VPC endpoint
    Type: String

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: 'api-service'
          ContainerPort: !Ref EnvPort
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: api-service
      ExecutionRoleArn: !GetAtt ServiceRole.Arn
      ContainerDefinitions:
        - Name: redis-local
          Essential: true
          Image: redis
          Memory: 1024
          PortMappings:
            - ContainerPort: 6379
              HostPort: !Ref EnvRedisPort
        - Name: api-service
          Essential: true
          DependsOn:
            - ContainerName: redis-local
              Condition: START
          Image: !Ref ImageUrl
          Memory: 2048
          PortMappings:
            - ContainerPort: !Ref EnvPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: PORT
              Value: !Ref EnvPort
            - Name: API_BASE_URL
              Value: !Ref EnvApiBaseUrl
            - Name: APP_BASE_URL
              Value: !Ref EnvAppBaseUrl
            - Name: ADMIN_BASE_URL
              Value: !Ref EnvAdminBaseUrl
            - Name: REDIS_HOST
              Value: !Ref EnvRedisHost
            - Name: REDIS_PORT
              Value: !Ref EnvRedisPort
            - Name: FACETEC_API_BASE_URL
              Value: !Ref EnvFaceTecApiBaseUrl
          Secrets:
            - Name: DATABASE_URI
              ValueFrom: !Sub
                - '${SecretArn}:DATABASE_URI::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: INTERNAL_CALL_ENCRYPTION_SECRET
              ValueFrom: !Sub
                - '${SecretArn}:INTERNAL_CALL_ENCRYPTION_SECRET::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: AUTH_REQ_UID_ENCRYPTION_SECRET
              ValueFrom: !Sub
                - '${SecretArn}:AUTH_REQ_UID_ENCRYPTION_SECRET::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: HMAC_ENCRYPTION_SECRET
              ValueFrom: !Sub
                - '${SecretArn}:HMAC_ENCRYPTION_SECRET::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: COOKIE_SIGNING_SECRET
              ValueFrom: !Sub
                - '${SecretArn}:COOKIE_SIGNING_SECRET::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: AUTH0_DOMAIN
              ValueFrom: !Sub
                - '${SecretArn}:AUTH0_DOMAIN::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: AUTH0_CLIENT_ID
              ValueFrom: !Sub
                - '${SecretArn}:AUTH0_CLIENT_ID::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: AUTH0_CLIENT_SECRET
              ValueFrom: !Sub
                - '${SecretArn}:AUTH0_CLIENT_SECRET::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
            - Name: AUTH0_AUDIENCE
              ValueFrom: !Sub
                - '${SecretArn}:AUTH0_AUDIENCE::'
                - SecretArn:
                    Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:Listener
      Priority: 2
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values: !Split [',', !Ref Hosts]
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  MongoDBEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Ref MongoVPCEServiceName
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}:VPC
      SubnetIds:
        !Split:
          - ","
          - Fn::ImportValue:
              !Sub ${EnvironmentName}:PrivateSubnets
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - 'arn:aws:s3:::examplebucket/*'



  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  Fn::ImportValue: !Sub '${EnvironmentName}:APISecretArn'
              - Effect: Allow
                Action:
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:Describe*'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:DescribeTargetGroups'
                  - 'elasticloadbalancing:DescribeTargetHealth'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

Outputs:
  MongoEndpointID:
    Description: The VPC Endpoint ID to use for linking the MongoDB service to our private subnets
    Value: !Ref MongoDBEndpoint